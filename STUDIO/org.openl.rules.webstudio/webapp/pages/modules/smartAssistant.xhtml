<ui:composition
        xmlns:ui="http://java.sun.com/jsf/facelets"
>
    <style>
        #smartAssistantChatIcon {
            position: absolute;
            right: 12px;
            bottom: 46px;
            width: 48px;
            height: 48px;
            border-radius: 100%;
            box-shadow: 0 3px 6px 0 rgba(0, 35, 64, 0.2);
            cursor: pointer;
        }

        #smartAssistantChatPopup {
            position: fixed;
            bottom: 34px;
            width: 0;
            height: 0;
            right: 0;
            border: 1px solid #ccc;
            background-color: #fff;
            visibility: hidden;
            z-index: 9999; /* Set a high z-index value */
            display: flex;
            flex-direction: column;
        }

        #smartAssistantChatBody {
            padding-left: 10px;
            padding-right: 10px;
            flex: 1; /* Make chatBody take up remaining space */
            overflow-y: auto; /* Add scrolling */
            display: flex; /* Add this */
            flex-direction: column; /* Add this */
        }

        #smartAssistantChatHeader {
            padding-left: 10px;
            padding-right: 10px;
            background-color: #efefef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        #smartAssistantChatMessages {
            flex: 1; /* Make chatMessages take up remaining space */
            /*overflow-y: auto;*/ /* Add scrolling */
            display: flex;
            flex-direction: column;
            justify-content: end;
        }

        #smartAssistantRegenerateLastMessage {
            display: flex;
            align-items: center;
            margin-top: 10px;
        }

        .smartAssistantRegenerateButton {
            text-align: center;
            padding: 4px 8px;
            background-color: #ececec;
            color: #555;
            font-size: 10px;
            text-decoration: none;
            border-radius: 15px;
            margin: 0 auto;
            /* margin-bottom: 10px; */
            width: 100px;
            display: none;
        }

        .smartAssistantRegenerateButton:hover {
            background-color: #d0d0d0;
        }

        .smartAssistantStopGeneratingButton {
            text-align: center;
            padding: 4px 8px;
            background-color: #ececec;
            color: #555;
            font-size: 10px;
            text-decoration: none;
            border-radius: 15px;
            margin: 0 auto;
            /* margin-bottom: 10px; */
            width: 100px;
            display: none;
        }

        .smartAssistantStopGeneratingButton:hover {
            background-color: #d0d0d0;
        }

        #smartAssistantUserInputContainer {
            display: flex;
            align-items: center;
            margin: 10px;
        }

        #smartAssistantUserInputContainer button {
            margin-top: auto; /* Push the button to the bottom of the container */
        }

        #smartAssistantUserInput {
            flex: 1;
            margin-right: 10px;
        }

        .smartAssistantSent {
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

        .smartAssistantSent div {
            background-color: #e5f0ff;
            color: #000;
            text-align: left;
            margin-right: 10%;
            margin-top: 10px;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: fit-content;
        }

        .smartAssistantReceived {
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: flex-end;
        }

        .smartAssistantReceived div {
            background-color: #f8f8f8;
            color: #000;
            margin-left: 10%;
            text-align: left;
            margin-top: 10px;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: fit-content;
        }

        .smartAssistantSent div p {
            margin: 0;
            padding: 0 0 5px;
        }

        .smartAssistantReceived div p {
            margin: 0;
            padding: 0 0 5px;
        }

        .smartAssistantReceivedHref {
            margin-right: 10px;
            margin-top: 5px;
            margin-bottom: 5px;
        }

        #smartAssistantResizeGrip {
            position: absolute;
            top: 0;
            left: 0;
            width: 10px;
            height: 10px;
            cursor: nw-resize;
        }

        .smartAssistantSpinner {
            border: 3px solid #f3f3f3; /* Smaller border thickness */
            border-top: 3px solid #808080; /* Smaller border thickness */
            border-radius: 50%;
            width: 18px; /* Smaller width */
            height: 18px; /* Smaller height */
            animation: smartAssistantSpin 2s linear infinite;
            display: none;
            /* Center the spinner */
            /* Add space at the top */
            margin: 10px auto auto;
        }

        @keyframes smartAssistantSpin {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
    </style>

    <img id="smartAssistantChatIcon"
         src="#{contextPath}/webresource/images/smart-assistant-chat-icon.svg"
         title="Smart Assistant"
         alt="Smart Assistant"
         onclick="smartAssistantOpenChat()"/>

    <div id="smartAssistantChatPopup">
        <div id="smartAssistantResizeGrip"></div>
        <div id="smartAssistantChatHeader">
            <h4>Smart Assistant</h4>
            <span>
                <button onclick="smartAssistantCleanChat()">Clean</button>
                <button onclick="smartAssistantHideChat()">Hide</button>
            </span>
        </div>
        <div id="smartAssistantChatBody">
            <div id="smartAssistantChatMessages">
                <div class="smartAssistantReceived">
                    <div>
                        <p><b>Assistant: </b></p>
                        <p>Hi, how can I help you?</p>
                    </div>
                </div>
            </div>
        </div>
        <div id="smartAssistantSpinner" class="smartAssistantSpinner"></div>
        <div id="smartAssistantRegenerateLastMessage">
            <a id="smartAssistantRegenerateButton" href="javascript: void(0)"
               onclick="smartAssistantRegenerateLastMessage()"
               class="smartAssistantRegenerateButton">Regenerate</a>
            <a id="smartAssistantStopGeneratingButton" href="javascript: void(0)"
               onclick="smartAssistantStopGeneratingMessage()"
               class="smartAssistantStopGeneratingButton">Stop Generating</a>
        </div>
        <div id="smartAssistantUserInputContainer">
            <textarea id="smartAssistantUserInput" placeholder="Type in your question (maximum 1000 characters)â€¦"
                      style="resize: none; height: 60px; padding: 5px;"
                      maxlength="1000"
                      onkeydown="smartAssistantSendMessageOnEnter(event)"
                      oninput="smartAssistantCheckInput()"></textarea>
            <button id="smartAssistantSendButton" onclick="smartAssistantSendMessage()">Send</button>
        </div>
    </div>

    <script>
        //<![CDATA[
        var CHAT_POPUP_INITIAL_WIDTH = 600; // Define the initial width for the chatPopup
        var CHAT_POPUP_INITIAL_HEIGHT = 800; // Define the initial height for the chatPopup
        var CHAT_POPUP_MIN_WIDTH = 300; // Define the minimum width for the chatPopup
        var CHAT_POPUP_MIN_HEIGHT = 300; // Define the minimum height for the chatPopup

        var smartAssistantHistory = []
        var smartAssistantWaitingResponses = 0;
        var smartAssistantId = 1;
        var isSmartAssistantResizingChatPopup = false;

        function smartAssistantCheckInput() {
            const userInput = document.getElementById('smartAssistantUserInput');
            const sendButton = document.getElementById('smartAssistantSendButton');
            // Enable the button if the textarea has text, disable it otherwise
            sendButton.disabled = userInput.value.trim() === '' || smartAssistantWaitingResponses === smartAssistantId;
        }

        function smartAssistantStopGeneratingMessage() {
            smartAssistantId += 1;
            smartAssistantWaitingResponses = 0;
            displaySmartAssistantStopGeneratingButton(false);
            displaySmartAssistantRegenerateButton(true);
            smartAssistantCheckInput();
        }

        function smartAssistantRegenerateLastMessage() {
            const chatMessages = document.getElementById("smartAssistantChatMessages");
            // while last message in messageHistory is not USER type - remove it
            while (smartAssistantHistory.length > 0 && smartAssistantHistory[smartAssistantHistory.length - 1].type !== "USER") {
                smartAssistantHistory.pop();
                chatMessages.removeChild(chatMessages.lastChild);
            }
            smartAssistantCallAjax();
        }

        function displaySmartAssistantRegenerateButton(show) {
            const smartAssistantRegenerateButton = document.getElementById("smartAssistantRegenerateButton");
            smartAssistantRegenerateButton.style.display = show && smartAssistantHistory.length > 0 ? "block" : "none";
        }

        function displaySmartAssistantStopGeneratingButton(show) {
            document.getElementById('smartAssistantSpinner').style.display = show ? 'block' : 'none';
            const smartAssistantStopRegeneratingButton = document.getElementById("smartAssistantStopGeneratingButton");
            smartAssistantStopRegeneratingButton.style.display = show ? "block" : "none";
        }

        function smartAssistantCleanChat() {
            smartAssistantId += 1;
            smartAssistantWaitingResponses = 0;
            displaySmartAssistantRegenerateButton(false);
            displaySmartAssistantStopGeneratingButton(false);
            // clean chatMessages
            const chatMessages = document.getElementById("smartAssistantChatMessages");
            chatMessages.innerHTML = "";
            // clean messageHistory
            smartAssistantHistory = [];
            // add first message
            smartAssistantAddMessage("Hi, how can I help you?", null)
        }

        function smartAssistantOpenChat() {
            const chatPopup = document.getElementById("smartAssistantChatPopup");
            if (chatPopup.style.visibility === "visible") {
                chatPopup.style.visibility = "hidden";
                return;
            }
            chatPopup.style.visibility = "visible";
            displaySmartAssistantRegenerateButton(smartAssistantHistory.length > 0 && smartAssistantWaitingResponses !== smartAssistantId);
            displaySmartAssistantStopGeneratingButton(smartAssistantWaitingResponses === smartAssistantId);
            smartAssistantCheckInput();
            setChatPopupWidthAndHeight();
        }

        function smartAssistantHideChat() {
            const chatPopup = document.getElementById("smartAssistantChatPopup");
            chatPopup.style.visibility = "hidden";
            document.getElementById('smartAssistantSpinner').style.display = 'none';
            displaySmartAssistantRegenerateButton(false);
            displaySmartAssistantStopGeneratingButton(false);
        }

        function smartAssistantAddMessage(receivedMessage, refs) {
            const chatMessages = document.getElementById("smartAssistantChatMessages");
            const receivedWrapper = document.createElement("div")
            receivedWrapper.classList.add("smartAssistantReceived")
            const receivedMessageElement = document.createElement("div");
            receivedWrapper.appendChild(receivedMessageElement);
            let hrefs = "";
            if (refs) {
                refs.forEach((ref) => {
                    hrefs += "<a class=\"smartAssistantReceivedHref\" href='" + ref.url + "' target='_blank'>" + ref.title + "</a>";
                });
            }
            receivedMessageElement.innerHTML = "<p><b>Assistant: </b></p>" + "<p>" + receivedMessage + "</p>";
            // if hrefs is not null and length > 0
            if (hrefs !== "") {
                receivedMessageElement.innerHTML += "<p>" + hrefs + "</p>";
            }

            chatMessages.appendChild(receivedWrapper);

            // Automatically scroll to the bottom of the chatBody
            const chatBody = document.getElementById("smartAssistantChatBody");
            chatBody.scrollTop = chatBody.scrollHeight;
        }

        function formattedMessage(inputText) {
            const text = inputText.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            // Split the 'text' into an array of paragraphs based on line breaks
            const paragraphs = text.split('\n');

            // Initialize an empty variable to hold the formatted text
            let formattedMessage = "";

            // Loop through each paragraph and wrap it with <p>...</p> tags
            for (const paragraph of paragraphs) {
                // Remove leading and trailing white spaces from each paragraph
                const trimmedParagraph = paragraph.trim();

                // Skip empty paragraphs (optional)
                if (trimmedParagraph !== "") {
                    // Wrap the paragraph with <p>...</p> tags and append to the formatted text
                    formattedMessage += "<p>" + trimmedParagraph + "</p>";
                }
            }
            return formattedMessage;
        }

        function smartAssistantSendMessage() {
            const userInput = document.getElementById("smartAssistantUserInput");
            const chatMessages = document.getElementById("smartAssistantChatMessages");
            const message = userInput.value.trim();

            if (message !== "") {
                const sentWrapper = document.createElement("div")
                const sentMessageElement = document.createElement("div");
                sentWrapper.appendChild(sentMessageElement);
                sentWrapper.classList.add("smartAssistantSent")
                // Escape message
                sentMessageElement.innerHTML = "<p><b>You:</b></p>" + formattedMessage(message);
                chatMessages.appendChild(sentWrapper);
                userInput.value = "";

                // Add message to history
                smartAssistantHistory.push({text: message, type: "USER"});
                smartAssistantCallAjax();
            }
        }

        function smartAssistantCallAjax() {
            // if url without parameters ends with "table" - get id from url
            let tableId = null;
            if (window.location.href.split('?')[0].endsWith("table")) {
                const urlSearchParams = new URLSearchParams(window.location.href.split('?')[1]);
                if (urlSearchParams.has('id')) {
                    tableId = urlSearchParams.get('id');
                }
            }
            const data = JSON.stringify({
                "tableId": tableId,
                "messages": smartAssistantHistory.filter((message) => message.text !== "")
            });
            // Show the spinner
            smartAssistantId += 1;
            smartAssistantWaitingResponses = smartAssistantId;
            displaySmartAssistantRegenerateButton(false);
            displaySmartAssistantStopGeneratingButton(true);
            const currentSmartAssistantId = smartAssistantId;
            fetch('#{contextPath}/web/assistant/ask_help', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: data
            })
                .then(response => response.json())
                .then(response => {
                    if (currentSmartAssistantId !== smartAssistantId) {
                        return;
                    }
                    response.forEach((receivedMessage) => {
                        smartAssistantHistory.push({text: receivedMessage["text"], type: "ASSISTANT"});
                        // visibility of smartAssistantRegenerateLastMessage
                        smartAssistantAddMessage(formattedMessage(receivedMessage["text"]), receivedMessage["refs"]);
                    });
                    // Hide the spinner
                    smartAssistantWaitingResponses = 0;
                    displaySmartAssistantStopGeneratingButton(false);
                    displaySmartAssistantRegenerateButton(true);
                }).catch(() => {
                if (currentSmartAssistantId !== smartAssistantId) {
                    return;
                }
                smartAssistantHistory.push({text: "", type: "ASSISTANT"});
                smartAssistantAddMessage("Something went wrong. Please try again later.", null, "received");
                // Hide the spinner in case of error
                smartAssistantWaitingResponses = 0;
                displaySmartAssistantStopGeneratingButton(false);
                displaySmartAssistantRegenerateButton(true);
            });
        }

        function smartAssistantSendMessageOnEnter(event) {
            if (event.keyCode === 13 && smartAssistantWaitingResponses !== smartAssistantId) {
                event.preventDefault();
                smartAssistantSendMessage();
            }
        }

        function setChatPopupWidthAndHeight(event) {
            const chatPopup = document.getElementById("smartAssistantChatPopup");
            let nextWidth
            let nextHeight

            // Get the window width and height
            let windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            let windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;

            if (chatPopup.clientWidth === 0 && chatPopup.clientHeight === 0) {
                // Set the initial width and height
                nextWidth = Math.min(CHAT_POPUP_INITIAL_WIDTH, windowWidth - 40);
                nextHeight = Math.min(CHAT_POPUP_INITIAL_HEIGHT, windowHeight - 40);
            } else if (event) {
                // Calculate the new width and height
                nextWidth = chatPopup.offsetWidth - (event.clientX - chatPopup.getBoundingClientRect().left);
                nextHeight = chatPopup.offsetHeight - (event.clientY - chatPopup.getBoundingClientRect().top);

                // Apply minimum width and height
                nextWidth = Math.min(nextWidth, windowWidth - 40);
                nextHeight = Math.min(nextHeight, windowHeight - 40);
            } else {
                // Apply minimum width and height
                nextWidth = Math.min(chatPopup.clientWidth, windowWidth - 40);
                nextHeight = Math.min(chatPopup.clientHeight, windowHeight - 40);
            }

            nextWidth = Math.max(nextWidth, CHAT_POPUP_MIN_WIDTH);
            nextHeight = Math.max(nextHeight, CHAT_POPUP_MIN_HEIGHT);

            // Update the element
            chatPopup.style.width = nextWidth + 'px';
            chatPopup.style.height = nextHeight + 'px';
        }

        document.getElementById("smartAssistantResizeGrip").addEventListener('mousedown', function (e) {
            isSmartAssistantResizingChatPopup = true;
        });

        document.addEventListener('mousemove', function (event) {
            if (!isSmartAssistantResizingChatPopup) {
                return;
            }
            setChatPopupWidthAndHeight(event)
        });

        document.addEventListener('mouseup', function () {
            isSmartAssistantResizingChatPopup = false;
        });

        window.addEventListener('resize', function () {
            setChatPopupWidthAndHeight()
        })
        //]]>
    </script>
</ui:composition>
